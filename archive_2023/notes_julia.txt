**Edits for julia.parexamples**


For all examples: Go to the Julia Github page, download the master code as a zip file. Then go to Google Colab, on the left-hand bar, click the files icon. Click upload files, go to the Julia master zip, and from the zip select the .jl example files.

01-hello-impl.jl :
For all examples including MPI, these lines have to be the first couple of lines (only has to be done once before you start working with the MPI examples):

import Pkg
Pkg.add("MPI")
using MPI 
MPI.Init()

01-hello.jl:

import MPI
include("01-hello-impl.jl")

function main()
    #MPI.Init()

    do_hello()

    #= MPI.Finalize() =#
end

main()

-- you have to comment out MPI.Init() and MPI.Finalize() if you want to do all the examples after one another. If you do MPI.Finalize() you can't do MPI.Init() anymore in the next example, it'll crash

02-broadcast-impl.jl:

using Printf
function do_broadcast()
    comm = MPI.COMM_WORLD

    if MPI.Comm_rank(comm) == 0
        println(repeat("-",78))
        println(" Running on $(MPI.Comm_size(comm)) processes")
        println(repeat("-",78))
    end

    MPI.Barrier(comm)

    N = 5
    root = 0

    if MPI.Comm_rank(comm) == root
        A = [1:N;] * (1.0 + im*2.0)
    else
        A = Array(Complex128, N)
    end

    MPI.Bcast!(A,length(A), root, comm)

    @printf("[%02d] A:%s\n", MPI.Comm_rank(comm), A)

    if MPI.Comm_rank(comm) == root
        B = Dict("foo" => "bar")
    else
        B = nothing
    end

    B = MPI.bcast(B, root, comm)
    @printf("[%02d] B:%s\n", MPI.Comm_rank(comm), B)


    if MPI.Comm_rank(comm) == root
        f = x -> x^2 + 2x - 1
    else
        f = nothing
    end

    f = MPI.bcast(f, root, comm)
    @printf("[%02d] f(3):%d\n", MPI.Comm_rank(comm), f(3))
end

-- add using Printf as the first statement

02-broadcast.jl:

import MPI
using Printf
include("02-broadcast-impl.jl")

function main()
    #MPI.Init()

    do_broadcast()

    #MPI.Finalize()
end

main()

-- Comment out MPI Init/Finalize. Again, make sure you include "using Printf"

03-reduce-impl.jl:

import MPI
using Printf
function do_reduce()
    comm = MPI.COMM_WORLD

    MPI.Barrier(comm)

    root = 0
    r = MPI.Comm_rank(comm)

    sr = MPI.Reduce(r, MPI.SUM, root, comm)

    if(MPI.Comm_rank(comm) == root)
        @printf("sum of ranks: %s\n", sr)
    end
end

do_reduce()

-- include "using Printf"

03-reduce.jl:
import MPI
using Printf
include("03-reduce-impl.jl")

function main()
    #MPI.Init()

    do_reduce()

    #MPI.Finalize()
end

main()

-- Comment out MPI Init/Finalize. for some weird reason this function crashes my Google Colab every time I try to run it. 
**Edits for intro_to_julia.ipynb:**

julpar-01.jl:

using Distributed

x=nprocs()
y=workers()
println("number of procs: $x ")
println("workers: $y")

W1 = workers()[1];
P1 = remotecall(x -> factorial(x),W1,20)
result=fetch(P1)
println("remote result: $result ")

P2 = @spawnat W1 rand() * result
result2 = fetch(P2)
println("remote result modified: $result2 ")


-- first line has to be "using Distributed"

julpar-02.jl

using Distributed

function findpi(n)
           inside = 0
           for i = 1:n
               x, y = rand(2) * 2 - 1
               if (x^2 + y^2 <= 1)
                   inside +=1
               end
           end
           pi = 4.0 * inside / n
           println("pi: $pi")
       end


function parallel_findpi(n)
           inside = @distributed (+) for i = 1:n
               x, y = rand(2) * 2 - 1
               x^2 + y^2 <= 1 ? 1 : 0
           end
           pi = 4.0 * inside / n
           println("pi: $pi")
       end

x=nprocs()
println("number of procs : $x")
if x == 1
	@time findpi(100000000)
else
	@time parallel_findpi(100000000)
end

-- first line has to be "using Distributed" + @parallel needs to be changed to @distributed
-- This function is throwing a weird error at me " MethodError: no method matching -(::Vector{Float64}, ::Int64)
For element-wise subtraction, use broadcasting with dot syntax: array .- scalar". Don't know enough about Julia to figure out what needs to change. 



In[12] + Out[12]:
- NaN==NaN, NaN!=NaN, NaN-Inf gives:
- (false, true, NaN)

When looking at the “?”, it might be useful to mention that you have to type the “?” First, which brings you into the help state of Julia. *you can’t copy paste the command, because it will not read the “?” First and therefore will not put you in the “help?” state*

In[30] - this does not work anymore. Pi just shows the pi sign, and e throws an error
—> for e, the Euler number, you now have to type \euler + tab

in[31] -  pi does say pi=3.14…. When you just assign it to a variable, but not when you print it using println

in[32] - same thing

in[35] - throwing an error for me
—> deprecated, now varinfo()

in[45] - search() doesn’t work for me, contains() only shows true or false
—> deprecated. To show index, use findfirst( “ “, string), findlast(“ “, string), findall(“ “, string)

out[46] - 2-element Vector{SubString{String}} instead of Array

in[48] - did not work on my computer
—> italics in Julia should be like *this*, but doesn’t do anything 

in[52] - UndefVarError: `ismatch` not defined
—> ismatch(regex, str) has been deprecated in favor of occursin(regex, str). Gives right answer

in[58] - not working: “ERROR: MethodError: no method matching (Array{Float64})(::Int64, ::Int64)

Closest candidates are:
  (Array{T})(::LinearAlgebra.UniformScaling, ::Integer, ::Integer) where T”

—> if you type Array{Float64}(undef,2,2,3) it does work, I do get different numbers than the example.

in[70] - skips from a6 to a8, and then a7 at in[77]

in[72] - ERROR: UndefVarError: `det` not defined, ERROR: UndefVarError: `trace` not defined, ERROR: UndefVarError: `diag` not defined.

in[73] - ERROR: UndefVarError: `eigvals` not defined

in[78] - ERROR: UndefVarError: `vecdot` not defined
—> dot() instead of vecdot()

—> for the 3 above: need to first load linear algebra package: “using LinearAlgebra”

out[85] - description for output is different: “KeySet for a Dict{Any, Any} with 3 entries. Keys:”

in[94] - error after “end”: ERROR: syntax: invalid escape sequence
—> it does work when you type the function:
 function print_word_list(words_array)
           words_str = join(words_array, ", ", " and ")
           println(words_str) *or println("We have: ", words_str, “!”)
       end

in[101] - is the a italic? Don’t know what that means in Julia, is not explained in this guide. Same with in[48]
—>  println("a, b, c are: $a, $b, $c")

in[108] - ERROR: DomainError with -1.0:
sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).
Stacktrace:
 [1] throw_complex_domainerror(f::Symbol, x::Float64)
   @ Base.Math ./math.jl:33
 [2] sqrt
   @ ./math.jl:677 [inlined]
 [3] sqrt
   @ ./math.jl:1491 [inlined]
 [4] f1(x::Int64)
   @ Main ./REPL[121]:1
 [5] top-level scope
   @ REPL[123]:1


in[112] - readstring() is deprecated. You can now use read( file, String), or readchomp(file)

in[114] - keep getting the error: ERROR: UndefVarError: `writedlm` not defined. Also tried another way as mentioned in the Julia documentation (https://docs.julialang.org/en/v1/stdlib/DelimitedFiles/). So I also couldn’t test in[115-116]

in[116] - Keep getting error, also tried changing the line to cp("./test-write.txt","./test-write-bk.txt”; remove_destination=true), but it still didn’t threw this error: 

ERROR: MethodError: no method matching cp(::String, ::String; remove_destination::Bool)

Closest candidates are:
  cp(::AbstractString, ::AbstractString; force, follow_symlinks) got unsupported keyword argument "remove_destination"
   @ Base file.jl:376

in[114-116]—> use “using DelimitedFiles”, and it works

In [120-122] - couldn’t install the pkg in the Julia terminal version, have to try once I get it set up in Jupyter

in[126] - ERROR: MethodError: no method matching fieldnames(::Expr). Should still work according to Julia documentation
—> fieldnames now operates only on types -> fieldnames(typeof(a)). Gives the answer (:head, :args), so slightly different than what is on Github
